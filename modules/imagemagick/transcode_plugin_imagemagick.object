<?php
class transcode_plugin_imagemagick implements transcoder_plugin {//TODO: Have imagemagick handle pdf>>images instead of poppler, because it is bad at that
	
	public function __construct() {	}
	
	public function execute($settings, $input, $presetname){//$input is full file object, $settings is array of settings.
		
		global $agave;
		$fileman = $agave->load('fileManager');
		$time = time();


		$shellscript = "#!/bin/sh
"./*"exec 2>&1".*/"
cd ".$fileman->realpath("public://")."
convert ".$fileman->realpath($input->uri);
		
		if(isset($settings['resize'])){ //Needs a percentage with the % intact eg -resize 200%
			$shellscript .= " -resize ".$settings['resize'];
		}
		if(isset($settings['compress'])){ //Choices are: None, BZip, Fax, Group4, JPEG, JPEG2000, Lossless, LZW, RLE or Zip.
			$shellscript .= " -compess ".$settings['compress'];
		}
		if(isset($settings['quality'])){ // JPEG,MPEG: 0-100 // MIFF: 0-10 // MNG,PNG: 0-100
			$shellscript .= " -quality ".$settings['quality'];
		}
		//$shellscript .= ' -verbose -debug "All"'; //Put this in if you want to see a WHOLE LOT of debug info for imagemagick
		$shellscript .= " "."transcoder_output_".$time.".".$settings['format'];
		
		passthru($shellscript);
		
		$trans = $agave->load('transcoder');
		
		if($input->extension == 'gif'){ //Handles animated gif output (many files)
			$count = $this->animated_gif_count_frames($input->server_path);
			if($count>1){ 
				$k=0;
				while($k<$count){
					$filenames[] = "transcoder_output_".$time."-".$k.".".$settings['format']; 
					$k+=1;
				}
				$newfiles = array();
				foreach($filenames as $filename){
					$parentKey = $input->fileKey;
					$newfiles[] = $trans->save_result($filename, $parentKey, $time, $presetname);
				}
			}
			else{
				$filename = "transcoder_output_".$time.".".$settings['format'];
				$parentKey = $input->fileKey;
				$newfile = $trans->save_result($filename, $parentKey, $time, $presetname);
				$newfiles = array();
				$newfiles[] = $newfile;
			}
		}
		else{
			$filename = "transcoder_output_".$time.".".$settings['format'];
			$parentKey = $input->fileKey;
			$newfile = $trans->save_result($filename, $parentKey, $time, $presetname);
			$newfiles = array();
			$newfiles[] = $newfile;
		}
		return $newfiles;
	}
	
	private function animated_gif_count_frames($filename)
	{
		$filecontents=file_get_contents($filename);
		$str_loc=0;
		$count=0;
		while($count < 256){ // don't think we're gonna run into animated gifs with more that 256 frames, but this is still a lame loop
			$where1=strpos($filecontents,"\x00\x21\xF9\x04",$str_loc);
			if($where1 === FALSE){
				break;
			}
			else{
				$str_loc=$where1+1;
				$where2=strpos($filecontents,"\x00\x2C",$str_loc);
				if($where2 === FALSE){
					break;
				}
				else{
					if($where1+8 == $where2){
						$count++;
					}
					$str_loc=$where2+1;
				}
			}
		}
		return $count;
	}
	
	private function pdf_count_pages($filename)
	{
		
	}

        public function creationForm($formarr, $form_values, $step) {
            switch($step) {
                case 1:
	      		$formarr['fields']['outformat'] = array(
					'#name'=>'outformat',
					'#label'=>'Select the extension to which imagemagick will convert images:',
					'#type'=>'select',
					'#values'=>array('.bmp','.gif','.jpg','.png','.tif'),
					'#default'=>NULL,
		      		'#validation'=>'/^\.([A-Za-z0-9]+)$/',
					'#errormessage'=>'that is not legitimaaaaaate'
	      		);
                break;
                case 2:
                    switch($form_values['outformat']){
                            case '.jpg':
                                    $formarr['fields']['quality'] = array(
                                                    '#name'=>'quality',
                                                    '#label'=>'Input image quality 0-100 (lower number = higher compression):',
                                                    '#type'=>'text',
                                                    '#default'=>'85',
                                            '#validation'=>'/^([0-9]{1,3})$/',
                                                    '#errormessage'=>'that is not legitimaaaaaate'
                                    );
                            break;
                            case '.png':
                                    $formarr['fields']['quality'] = array(
                                                    '#name'=>'quality',
                                                    '#label'=>'Input image quality 0-100 (lower number = higher compression):',
                                                    '#type'=>'text',
                                                    '#default'=>'85',
                                            '#validation'=>'/^((100)|(\d{1,2}))$/',
                                                    '#errormessage'=>'that is not legitimaaaaaate'
                                    );
                            break;
                    }
                    $formarr['fields']['resize'] = array(
                            '#name'=>'resize',
                            '#label'=>'Input scaling factor, if desired, as a percentage:',
                            '#type'=>'text',
                            '#default'=>'100%',
                            '#validation'=>'/^([0-9]{1,4})\%$/',
                            '#errormessage'=>'that is not legitimaaaaaate'
                    );
                    $formarr['fields']['laststep'] = array(
                            '#name' => 'laststep',
                            '#type' => 'hidden',
                            '#value' => 'true',
                    );
                break;
            }
            return $formarr;
        }

        public function saveForm($form, &$settings, &$acceptedextensions, &$targetextension) {
            	$acceptedextensions = array('.bmp','.gif','.jpg','.jpeg','.png','.tif','.tiff');
                $targetextension = $form->values['outformat'];
                $settings['format']=$form->values['outformat'];
                if(isset($form->values['resize'])){
                        $settings['resize']= $form->values['resize'];
                }
                if(isset($form->values['compress'])){
                        $settings['compress']= $form->values['compress'];
                }
                if(isset($form->values['quality'])){
                        $settings['quality']= $form->values['quality'];
                }
        }
	
}