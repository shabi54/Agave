<?php
define('THEME_LOCATION_GLOBAL', 1);
define('THEME_LOCATION_LOCAL', 0);
final class themer {
	/*
	 * TODO: 
	 * 1. don't bootstrap theme on construct, do it on first call to theme() 
	 * 2. set property $this->ajax, on index only return if $this->ajax = false... or something like that
	 */
	public $fullRequest = TRUE;
	
	public function __construct() {
		global $agave;
		$this->agave = $agave;
		$user = $agave->load('user');
		$this->js = array();
		$this->format = 'html';

		$this->styles['inline'] = array();
		$this->styles['files'] = array();
		$this->javascript['inline'] = array();
		$this->javascript['files'] = array();
		
		if(!isset($this->theme)) $this->setTheme($agave->setting('default_theme'), TRUE);

		//set necessary js properties
		$this->js['base_url'] = $agave->base_url;
		$this->js['site_url'] = $agave->site_url;
		$this->js['agave_base_url'] = $agave->agave_base_url;
		$this->js['uri'] = $agave->uri;
		$this->js['user']['isAnon'] = $user->isAnon;
		$this->js['user']['userKey'] = $user->userKey;
	}
	
	private function bootstrapTheme() {
		global $agave;
		$file = $agave->site_dir."themes/".$this->theme."/theme.info";
		
		if(file_exists($file)) {
			$this->readInfoFile($file);
			$this->themeLocation = THEME_LOCATION_GLOBAL;
		}
		else {
			$file = "themes/".$this->theme."/theme.info";
			if(file_exists($file)) {
				$this->readInfoFile($file);
				$this->themeLocation = THEME_LOCATION_GLOBAL;
			}
		}
		if(!isset($this->pageTemplate)) $this->pageTemplate = 'page';
		$agave->invoke('theme_bootstrap');		
	}
	
	private function readInfoFile($file) {
		include($file);
		//TODO: do we really want this? answer: absolutely, but parse it differently, use a text file, less code the better
		$javascript = theme_return_javascript();
		$styles = theme_return_styles();
		$regions = theme_return_regions();
		$vars = theme_return_vars();
		foreach($javascript as $file) $this->addJS(NULL,NULL,NULL,$file);
		foreach($styles as $file) $this->addCSS(NULL,NULL,NULL,$file);
		foreach($vars as $key=>$value) $this->$key = $value;
		$this->regions = array();
		foreach($regions as $region) {
			$this->page[$region] = array();
			$this->regions[] = $region;
		}
	}
	
	public function theme($requested_themer_module=NULL, $requested_themer_template, $args=NULL) {
		global $agave;	//agave always available in templates
		//TODO: maybe check for first call to $t->theme() - if so, move setTheme/bootstrapTheme to trigger on first call
		//
		
		$requested_themer_template_file = $this->loadTemplate($requested_themer_module, $requested_themer_template);
		if ($requested_themer_template_file) {
			if($args) extract($args, EXTR_SKIP); //Extract the variables to a local namespace	
			
			if($requested_themer_template==$this->pageTemplate) {
				$this->loadPageVars();
				extract($this->page); //make available page level content if we are themeing the final page
			}
			
			$themerContent = isset($this->output) ? $this->output : NULL; //Make available to template any content stored in themer object

			ob_start();									//Start output buffering
			include $requested_themer_template_file;	//Run the template file
			$contents = ob_get_contents();				//Get the contents of the buffer
			ob_end_clean();								//End buffering and discard
			return $contents;
		}
		else {
			$agave->log('build_warning', "No template found for <i>$template.tpl.php</i>");
			return $this->output; //return un-themed output
		}
	}

	private function loadPageVars() {
		global $agave;
		$this->page['user'] = $agave->load('user');
		$this->page['siteName'] = $agave->setting('siteName');
		$this->page['footer_message'] = $agave->setting('footer_message');
		
		//if panels should be loaded, load them here
		$agave->invoke('pre_panel_render');
		if(isset($agave->uri['panels']) || (isset($_SESSION['agave_error_page']) && $_SESSION['agave_error_page']==TRUE && $agave->setting('message-panels'))) $this->loadPanels();
		$agave->invoke('post_panel_render');

//$agave->death($_SESSION);

		//call themes post_process function
		if(function_exists('theme_postProcess')) call_user_func('theme_postProcess');

		//load optional core functionality, like user messaging
		$this->loadAgaveOptionals();

		//unpack page level messages
		$this->page['messages'] = $agave->getMessages();
		$this->page['debug'] = $agave->getDebug();

		//must unpack JS and CSS last in case other things need themer functions (like panels and debug)
		$agave->invoke('unpack_scripts');
		$this->page['styles'] = $this->unpackCSS();
		$this->page['javascript'] = $this->unpackJS();
	}
	
	private function loadAgaveOptionals() {
		global $agave;

		//add user messaging?
		if($agave->setting('user-messaging')) {
			$this->js['user']['userMessageInterval'] = $agave->setting('user-message-interval');
			$this->js['user']['userMessageAsync'] = $agave->setting('user-messaging-async');
			$this->js['user']['userMessaging'] = $agave->setting('user-messaging');
			//TODO: check user for types of viewable messages 
			//$this->js['user']['messages']['types'] = array();
			$this->addJS('user','js/agave-user-messages.js');
			$this->addCSS('user','theme/css/agave-user-messages.css');
		}	
	}
	
	private function loadTemplate($module=NULL, $template) {
		//$template can be be overriden from either a local or global theme
		//if it's not found there, we look for it in the specified module, local first, global second
		global $agave;

		$file = ($this->themeLocation==THEME_LOCATION_GLOBAL) ? "themes/$this->theme/$template.tpl.php" : $agave->site_dir."themes/$this->theme/$template.tpl.php";
		if(file_exists($file)) return $file;
		else {
			$file = $agave->modulePath($module)."theme/$template.tpl.php";
			if(file_exists($file)) return $file;
			else return FALSE;
		}
	}
	
	public function addCSS($module=FALSE, $file=FALSE, $inline=FALSE, $vendor=FALSE) {
		$styles = FALSE;
		if($file) $styles = $this->agave->modulePath($module).$file;
		if($vendor) $styles = $vendor;
		if($inline) $styles = $inline;
		if(!isset($this->styles)){
		}
		if($inline && !in_array($styles, $this->styles['inline'])) {
			$this->styles['inline'][] = $styles;
		}
		else if(!in_array($styles, $this->styles['files'])) {
			$this->styles['files'][] = $styles;
		}
	}

	public function addJS($module=FALSE, $file=FALSE, $inline=FALSE, $vendor=FALSE) {
		$js = FALSE;
		if($file) $js = $this->agave->modulePath($module).$file;
		if($vendor) $js = $vendor;
		if($inline) $js = $inline;
		if($inline && !in_array($js, $this->javascript['inline'])) {
			$this->javascript['inline'][] = $js;
		}
		else if(!in_array($js, $this->javascript['files'])) {
			$this->javascript['files'][] = $js;
		}
	}
	
	private function unpackCSS() {
		global $agave;
		$styles = '';
		for($i=0; $i<count($this->styles['files']); $i++) {
			$path = (substr($this->styles['files'][$i], 0, 4)=="http") ? $this->styles['files'][$i] : $agave->agave_base_url.$this->styles['files'][$i];
			$styles .= "<link rel='stylesheet' type='text/css' href='".$path."' />\n";
		}
		if(isset($this->styles['inline'])) {
			$styles .= "<style type='text/css'>\n";
			foreach($this->styles['inline'] as $style) $styles .= $style."\n\n";
			$styles .= "</style>\n";
		}
		return $styles;
	}
	
	private function unpackJS() {
		global $agave;
		$js = '';

		//automatically add $this->js variables
		$js = "<script type='text/javascript' language='javascript'>var agave = ".json_encode($this->js)."</script>";			
		
		for($i=0; $i<count($this->javascript['files']); $i++) {
			$path = (substr($this->javascript['files'][$i], 0, 4)=="http") ? $this->javascript['files'][$i] : $agave->agave_base_url.$this->javascript['files'][$i];
			$js .= "<script type='text/javascript' language='javascript' src='".$path."'></script>\n";
		}
		if(isset($this->javascript['inline'])) {
			$js .= "<script type='text/javascript'>\n";
			foreach($this->javascript['inline'] as $style) $js .= $style."\n\n";
			$js .= "</script>\n";
		}		
		return $js;
	}
	
	public function setFormat($format) {
		$this->format = $format;
	}
	
	public function setTheme($theme, $overwrite = FALSE) {
		//TODO: make sure not to overwrite previous added JS/styles
		$this->theme = $theme;

		if($overwrite) {
			//define placeholders for page-level data
			if(!isset($this->page)) $this->page = array();
			if(!isset($this->page['styles'])) $this->page['styles'] = null;
			if(!isset($this->page['javascript'])) $this->page['javascript'] = null;
			if(!isset($this->page['title'])) $this->page['title'] = null;
			if(!isset($this->page['footer'])) $this->page['footer'] = null;
			if(!isset($this->page['siteName'])) $this->page['siteName'] = null;
			if(!isset($this->styles)) $this->styles = array();
			if(!isset($this->javascript)) $this->javascript = array();
			
			//jquery always added by default
			$this->addJS(NULL,NULL,NULL,"vendor/jQuery/jquery.js");
		}
		
		//bootstrap theme to load regions and page-level javascript/styles
		$this->bootstrapTheme();
	}
		
	public function loadPanels() {
		global $agave;
		$user = $agave->load('user');
		$query = "SELECT * FROM `panels` WHERE `enabled`='1'";
		$panels = $agave->doSQLQuery($query, 3);

		//assemble all panels
		$i = 0;
		if($panels) foreach($panels as $panel) {
			//check include/exclude/access list against current url - $continue = TRUE/FALSE
			$continue = TRUE;
			if(!empty($panel['access']) && !$user->access($panel['access'])) $continue = FALSE;
			if(!empty($panel['exclude']) && in_array($agave->destination, explode(",", $panel['exclude']))) $continue = FALSE;
			if(!empty($panel['include']) && !in_array($agave->destination, explode(",", $panel['include']))) $continue = FALSE;			
			
			if($continue) {
				$themevars['title'] = $panel['title'];
				$themevars['id'] = $panel;
				$themevars['module'] = $panel['module'];
				$themevars['region'] = $panel['region'];
				$themevars['name'] = $panel['name'];
				
				//figure out where panel content comes from
				if(!empty($panel['content'])) $themevars['content'] = $panel['content'];
				elseif(!empty($panel['query']) && isset($panel['template'])) {
					$data = unserialize($panel['query']);
					$query = $data[0];
					$format  = $data[1];
					$sql = $agave->doSQLQuery($query, $format);
					$themevars['content'] = $this->theme($panel['module'], $panel['template'], $sql);
				}
				elseif(!empty($panel['func'])) {
					if(!function_exists($panel['func'])) $this->loadPanelFile($panel['module']);
					$themevars['content'] = call_user_func_array($panel['func'], array($agave->uri));
				}
				
				//add themed panel to array for designated region based on weight				
				if(isset($themevars['content'])) $this->page[$panel['region']][$panel['weight']] = $this->theme("themer","panel", $themevars);
			}
			$i++;
		}

		//compress regions down to string
		foreach($this->regions as $region) {
			ksort($this->page[$region]);
			$this->page[$region] = implode("\n\n", $this->page[$region]);
		}
	}
	
	//TODO: change this panel stuff to extensions
	public function loadPanelFile($module) {
		global $agave;
		$file = $agave->modulePath($module)."$module.panels";
		if(file_exists($file)) include($file);
	}
	
	public function flushOutput() {
		global $agave;
		$output .= $this->unpackCSS();
		$output .= $this->output;
		$output .= $this->unpackJS();
		$agave->stop($output); //kill request here (mainly used for ajax content requests)
	}
	
	public function returnMenu($menu) {
		global $agave;
		if($final=$this->agave->cache('menu_'.$menu)){
			return (!empty($final)) ? "<ul class='agave-menu $menu-menu menu-root'>".$this->markupMenuItems($final)."</ul>" : NULL;
		}
		else {
			$query = "SELECT array FROM `menu` WHERE `name`='$menu'";
			$arr = $agave->doSQLQuery($query, 0);
			//$agave->death($arr);
			$final = unserialize($arr);
			$this->agave->cache('menu_'.$menu, $final, 'themer');
			return (!empty($final)) ? "<ul class='agave-menu $menu-menu menu-root'>".$this->markupMenuItems($final)."</ul>" : NULL;
		}
	}
	
	private function markupMenuItems($arr) {
		global $agave;
		$user = $agave->load('user');
		$html = "";
                $htmlarr = array();
		
		foreach($arr as $key=>$val) {
			if(!$this->isProp($key)){
                                $thehtml = '';
                                isset($val['^weight']) ? $weight = $val['^weight'] : $weight = 0;
				if(!empty($val['^href'])) $href = (substr($val['^href'], 0, 4)=="http") ? $val['^href'] : $agave->base_url.$val['^href'];
				$beginLink = ($val['^href']) ? "<a href='".$href."'>" : NULL;
				$endLink = ($val['^href']) ? "</a>" : NULL;
				$title = (isset($val['^desc'])) ? "title='".htmlentities($val['^desc'], ENT_QUOTES)."'" : '';
				$classes = "menu-item";
				if(!$val['^visible']) $classes .= " hidden";
				if($agave->current_location == $val['^href'] || $agave->base_url.$agave->current_location == $val['^href'] || $val['^expanded']) {
					if($agave->current_location == $val['^href'] || $agave->base_url.$agave->current_location == $val['^href']) $classes .= " selected";
					$classes = "class='$classes'";
					if(($val['^access'] != NULL && $user->access($val['^access'])) || !$val['^access']) {
                                                $thehtml .= "<li $title $classes>".$beginLink.$key.$endLink;
                                                $boolsub = false;
                                                foreach($val as $k => $v) { if(!$this->isProp($k)){ $boolsub = true; } }
                                                if($boolsub){
                                                    $thehtml .= "<ul class='menu-sub'>";
                                                    $thehtml .= $this->markupMenuItems($val);
                                                    $thehtml .= "</ul>";
                                                }
                                                $thehtml .= "</li>";
					}
				}
				else {
					$classes = "class='$classes'";
					$thehtml .= (($val['^access'] != NULL && $user->access($val['^access'])) || !$val['^access']) ? "<li $title $classes>".$beginLink.$key.$endLink."</li>" : '';
				}
                                while(isset($htmlarr[$weight])){
                                    $weight += 0.01;
                                }
                                $htmlarr[$weight] = $thehtml;
			}
		}
		ksort($htmlarr);
                foreach($htmlarr as $key => $htmlbit){
                    $html .= $htmlbit;
                }
		return $html;
	}
	
	private function isProp($key){
		if(!(strpos($key,"^")===FALSE)) {
			return true;
		}
		else {
			return false;
		}
	}
	
	public function returnRequest($dest) {
		//TODO: revisit this, may not function any more
		global $agave;
		//store args for original request, don't want to permanantly override them
		$d = $agave->load('dispatcher');
		
		//figure out URIargs for request
		$dest = rtrim($dest, "/");
		$uri = $d->resolveRequest($dest);
				
		if(!$uri['validRequest']) return "<h4>INVALID REQUEST<h4>";

		//run request
		$d->route($uri);
		
		//return any output from request
		return (!empty($this->output)) ? $this->output : "<h4>NO OUTPUT FOR REQUEST</h4>";
	}
}