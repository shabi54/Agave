<?php
final class field_hidden extends genericField implements fieldInterface {
		
	public function __construct() {
		global $agave;
		$this->agave = $agave;
	}
	
	public function __destruct() { }
	
	
	public function format($values, $fieldName) {
		return $values[$fieldName];
	}
	
	public function unformat($values) {
		return $values[$fieldName];
	}
	
	public function edit($element) {
		//TODO add array handling
		$attributes = $this->generateAttributes($element);
		$attributes = $this->agave->invoke('field_hidden_edit', $attributes);
		$attributes = implode(" ", $attributes);
		
		$name = $this->generateName($element);
		//no need to unformat the value, was done when the element was generated
		$value = (isset($element['value'])) ? "value='".$element['value']."'" : "";
		$html = "<input type='hidden' name='".$name."' $attributes $value />";		
		
		return $html;		
	}
	
	public function display($values, $settings) {
		//TODO check settings - always have default setting
		
		return NULL;
	}
	
	public function validate($values, $metaData) {
		//TODO return true or false
		return TRUE;
	}
	public function returnSettingsForm($settings) {
		$elements = array();
		$elements[] = array(
			'name'=>'value',
			'type'=>'text',
			'label'=>'Value:',
			'help'=>'Optionally hard code a value in a hidden element.',
			'default'=>(isset($settings['value'])) ? $settings['value'] : NULL
		);
		
		return $elements;
	}

	public function saveSettingsFields($data) {
		$settings = array();
		$settings = $data;
		return $settings;
	}
	
}
?>