<?php
final class field_text extends genericField implements fieldInterface {
		
	public function __construct() {
		global $agave;
		$this->agave = $agave;
	}
	
	public function __destruct() { }
	
	
	public function format($values, $fieldName) {
		return $values[$fieldName];
	}
	
	public function unformat($values) {
		return $values[$fieldName];
	}
	
	public function edit($element) {
		//TODO add array handling
		$attributes = $this->generateAttributes($element);
		$attributes = $this->agave->invoke('field_text_edit', $attributes);
		$classes = $attributes['classes'];
		$maxlength = $attributes['maxlength'];
		$id = $attributes['id'];
		$title = $attributes['title'];
		$onchange = $attributes['onchange'];
		$disabled = $attributes['disabled'];
		$size = $attributes['size'];
		
		$name = $this->generateName($element);
		
		//no need to unformat the value, was done when the element was generated
		$value = (isset($element['default'])) ? "value='".$element['default']."'" : "";
		$html = "<input type='text' name='".$name."' $classes $maxlength $id $title $onchange $disabled $value $size />";
		
		return $html;		
	}
	
	public function display($values, $settings) {
		//TODO check settings - always have default setting
		$html = $this->listView($values);
		if(isset($settings['display'])) {
			switch ($settings['display']) {
				case 1 :
					$html = $this->listView($values);				
					break;
				case 2 :
					$html = $this->fieldView($values);				
					break;
			}
		}

		$html = $this->agave->invoke('field_text_display', $values);
		
		return $html;
	}
	
	public function validate($values, $metaData) {
		//TODO return true or false
		return TRUE;
	}
	
	private function listView($values) {
		return (is_array($values)) ? implode(", ", $values) : $values;
	}

	private function fieldView($values) {
		foreach($values as $value) $value = "<p>".$value."</p>";
		return (is_array($values)) ? implode("\n\n", $values) : $values;
	}

	public function returnSettingsForm($settings) {
		$elements = array();
		$elements[] = array(
			'name'=>'size',
			'type'=>'text',
			'label'=>'Size',
			'size'=>4,
			'maxlength'=>4,
			'default'=>(isset($settings['size'])) ? $settings['size'] : NULL
		);
		//validation: text
		$elements[] = array(
			'name'=>'validation',
			'type'=>'multiselect',
			'label'=>'Validation:',
			'values'=>array('-- None --','Letters only','Alpha-numeric','Numbers only','No special chars','Email','SSN','DL','PhoneUS','PhoneINTL'),
			'help'=>"Note: Specifying validation by default makes a field required",
			'default'=>(isset($settings['validation'])) ? array($settings['validation']) : array("-- None --")
		);
		//autosuggest: text
		$elements[] = array(
			'name'=>'autosuggest',
			'type'=>'textarea',
			'label'=>'Autosuggest',
			'help'=>'Just explain what you want to happen... the code will write itself. :)',
			'default'=>(isset($settings['autosuggest'])) ? $settings['autosuggest'] : NULL
		);
		
		//maxlength: text, textarea?
		$elements[] = array(
			'name'=>'maxlength',
			'type'=>'text',
			'label'=>'Max characters:',
			'size'=>5,
			'maxlength'=>5,
			'default'=>(isset($settings['maxlength'])) ? $settings['maxlength'] : NULL
		);
		return $elements;
	}

	public function saveSettingsFields($data) {
		$settings = array();
		
		$settings = $data;
				
		return $settings;
	}
	
}
?>